[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "{{ cookiecutter.project_slug }}"
version = "{{ cookiecutter.python_version }}"
description = "A unified framework for optimizing budget allocations across diverse models"
readme = "README.md"
authors = [
    {name = "{{ cookiecutter.author_name }}", email = "{{ cookiecutter.author_email }}"},
]
requires-python = ">={{ cookiecutter.python_version }}"
classifiers = [
   # TODO: Update classifiers as appropriate
]

dependencies = [

]

[project.optional-dependencies]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "sphinx-copybutton>=0.5.0",
    "sphinx-tabs>=3.2.0",
    "sphinx-autodoc-typehints>=1.12.0",
    "myst-parser>=0.18.0",
    "nbsphinx>=0.8.0",
    "sphinx-autobuild>=2021.3.14",
    "sphinxcontrib-mermaid>=0.7.1",
    "sphinx-design>=0.6.1",
    "linkify-it-py>=2.0.3",
]

dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.10.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]



[project.urls]
Homepage = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.github_repository }}"
Documentation = "https://{{ cookiecutter.github_repository }}.readthedocs.io"
Repository = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.github_repository }}"
Issues = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.github_repository }}/issues"

[tool.black]
line-length = 120
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 120

[tool.mypy]
python_version = "{{ cookiecutter.python_version }}"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-ra --strict-markers --cov={{ cookiecutter.project_slug }}"

[tool.coverage.run]
branch = true
source = ["{{ cookiecutter.project_slug }}"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]

[tool.uv.sources]
{{ cookiecutter.project_slug }} = { workspace = true }


